/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/expression@0.0.1/expression.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
var ReParse=require("reparse").ReParse;function expr(){return this.chainl1(term,disjunction)}function term(){return this.chainl1(notFactor,conjunction)}function notFactor(){return this.choice(negation,factor)}function factor(){return this.choice(group,phrase,word)}function group(){return this.between(/^\(/,/^\)/,expr)}function phrase(){return this.between(/^\"/,/^\"/,words)}function words(){return this.many1(word).join(" ")}function word(){return this.match(/^[#@_\-'&!\w\dàèìòùáéíóúäëïöüâêîôûçßåøñœæ]+/i).toString()}function notop(){return this.match(/^NOT/i).toUpperCase()}function negation(){return this.seq(notop,notFactor).slice(1)}function conjunction(){return OPTREES[this.match(/^AND/i).toUpperCase()]}function disjunction(){return OPTREES[this.match(/^OR/i).toUpperCase()]}var OPTREES={AND:function(e,t){return["AND",e,t]},OR:function(e,t){return["OR",e,t]}};function evalTree(e,t){if(!Array.isArray(e))return new RegExp("\\b"+e+"\\b","i").test(t);var r=e[0];return"OR"==r?evalTree(e[1],t)||evalTree(e[2],t):"AND"==r?evalTree(e[1],t)&&evalTree(e[2],t):"NOT"==r?!evalTree(e[1],t):void 0}function flattenTree(e){return collectLeaves(e,[],!0)}function collectLeaves(e,t,r){if(Array.isArray(e)){"NOT"==e[0]&&(r=!r);for(var n=1;n<e.length;n++)collectLeaves(e[n],t,r)}else r&&t.push(e);return t}function Expression(e){this.tree=new ReParse(e,!0).start(expr)}Expression.prototype={flatten:function(){return flattenTree(this.tree)},test:function(e){return evalTree(this.tree,e)}},module.exports=Expression;
//# sourceMappingURL=/sm/0ab83004ced1a9030a5e341bae7318132169803f71d2e4a0f278af0ea6be9ac2.map